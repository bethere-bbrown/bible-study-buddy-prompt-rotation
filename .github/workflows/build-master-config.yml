name: Build master-config.json

on:
  push:
    paths:
      - "versions.txt"
      - "intro-verses.txt"
      - "categorized/fallbacks.json"
      - "current-prompts.txt"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Show branch and files
        run: |
          echo "Branch: $(git branch --show-current)"
          echo "Root files:"; ls -la
          echo "categorized/:"; ls -la categorized || true

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build versions JSON (accept em dash or hyphen)
        run: |
          set -euo pipefail
          if [ ! -f versions.txt ]; then
            echo "[]" > .versions.json
          else
            # Normalize " - " to " — " so we accept either
            sed 's/ - / — /g' versions.txt | \
            jq -Rn '
              [ inputs
                | split("\n") | .[]
                | select(length>0)
                | gsub("\\r$"; "")
                | capture("^(?<name>.+?)\\s*\\((?<abbr>[^)]+)\\)\\s*—\\s*(?<id>[^\\s]+)\\s*$")?
                | if . == null then empty else {name: .name, abbr: .abbr, bibleId: .id} end
              ]
            ' > .versions.json
          fi
          echo "versions parsed:"; cat .versions.json

      - name: Build introVerses JSON (split by ' | ')
        run: |
          set -euo pipefail
          if [ ! -f intro-verses.txt ]; then
            echo "[]" > .intro.json
          else
            jq -Rn '
              [ inputs
                | split("\n") | .[]
                | select(length>0)
                | gsub("\\r$"; "")
                | (split(" | ") | {reference: .[0], text: .[1], reflection: ((.[2] // "") | sub("^Reflection:\\s*"; ""))})
              ]
            ' < intro-verses.txt > .intro.json
          fi
          echo "introVerses parsed:"; cat .intro.json

      - name: Load fallbacks JSON (ensure present)
        run: |
          set -euo pipefail
          if [ ! -f categorized/fallbacks.json ]; then
            echo "categorized/fallbacks.json missing, creating defaults"
            mkdir -p categorized
            printf '%s\n' '{' \
              '  "general": [],' \
              '  "newBelievers": [],' \
              '  "deepStudy": [],' \
              '  "application": []' \
              '}' > categorized/fallbacks.json
          fi
          jq '.' categorized/fallbacks.json > .fallbacks.json
          echo "fallbacks parsed:"; cat .fallbacks.json

      - name: Build current prompts array
        run: |
          set -euo pipefail
          if [ -f current-prompts.txt ]; then
            jq -Rs '
              split("\n")
              | map(gsub("\\r$"; ""))
              | map(select(length>0))
            ' < current-prompts.txt > .prompts.json
          else
            echo "[] " > .prompts.json
          fi
          echo "currentPrompts parsed:"; cat .prompts.json

      - name: Assemble master-config.json
        run: |
          set -euo pipefail
          jq -n \
            --slurpfile versions .versions.json \
            --slurpfile intro .intro.json \
            --slurpfile prompts .prompts.json \
            --slurpfile fallbacks .fallbacks.json \
            '{
              versions: $versions[0],
              introVerses: $intro[0],
              currentPrompts: $prompts[0],
              fallbacks: $fallbacks[0]
            }' > master-config.json
          echo "master-config.json:"; cat master-config.json

      - name: Commit if changed
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add master-config.json
            git commit -m "build: update master-config.json"
            git push
            echo "Updated master-config.json"
          else
            echo "No changes"
          fi
